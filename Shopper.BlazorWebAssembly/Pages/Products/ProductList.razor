@page "/products"

@using System.Threading

@inject IProductService productService
@implements IAsyncDisposable


<h3>Product List</h3>


<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Color</th>
            <th scope="col">Price</th>
        </tr>
    </thead>

    <tbody>

        @if (products!=null && products.Any())
        {
            @foreach (var product in products)
            {
                
                <ProductItemComponent Product=@product />
            }
        }
        else
        {
            <tr>
                <td colspan="3" >Cannot find products</td>
            </tr>
        }

    </tbody>

    <tfoot>
        Quantity: @products?.Count()
    </tfoot>
</table>

@code {

    private IEnumerable<Product>? products;

    private CancellationTokenSource cts = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        products = await productService.GetAsync(cts.Token);
    }

    public async ValueTask DisposeAsync()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
